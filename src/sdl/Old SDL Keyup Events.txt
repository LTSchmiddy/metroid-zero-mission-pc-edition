switch (event.key.keysym.sym) {
            //case SDLK_r:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
            //        if (emulating) {
                        //emulator.emuReset();

            //            systemScreenMessage("Reset");
            //        }
            //    }
            //    break;
            //case SDLK_b:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL))
            //        change_rewind(-1);
            //    break;
            //case SDLK_v:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL))
            //        change_rewind(+1);
            //    break;
            //case SDLK_h:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL))
            //        change_rewind(0);
            //    break;
            //case SDLK_j:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL))
            //        change_rewind((rewindTopPos - rewindPos) * ((rewindTopPos > rewindPos) ? +1 : -1));
            //    break;
            //case SDLK_e:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
            //        cheatsEnabled = !cheatsEnabled;
            //        systemConsoleMessage(cheatsEnabled ? "Cheats on" : "Cheats off");
            //    }
            //    break;

            //case SDLK_s:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
            //        if (sdlSoundToggledOff) { // was off
            //            // restore saved state
            //            soundSetEnable(sdlSoundToggledOff);
            //            sdlSoundToggledOff = 0;
            //            systemConsoleMessage("Sound toggled on");
            //        } else { // was on
            //            sdlSoundToggledOff = soundGetEnable();
            //            soundSetEnable(0);
            //            systemConsoleMessage("Sound toggled off");
            //            if (!sdlSoundToggledOff) {
            //                sdlSoundToggledOff = 0x3ff;
            //            }
            //        }
            //    }
            //    break;
            case SDLK_KP_DIVIDE:
                sdlChangeVolume(-0.1);
                break;
            case SDLK_KP_MULTIPLY:
                sdlChangeVolume(0.1);
                break;
            case SDLK_KP_MINUS:
                if (gb_effects_config.stereo > 0.0) {
                    gb_effects_config.stereo = 0.0;
                    if (gb_effects_config.echo == 0.0 && !gb_effects_config.surround) {
                        gb_effects_config.enabled = 0;
                    }
                    systemScreenMessage("Stereo off");
                } else {
                    gb_effects_config.stereo = SOUND_STEREO;
                    gb_effects_config.enabled = true;
                    systemScreenMessage("Stereo on");
                }
                break;
            case SDLK_KP_PLUS:
                if (gb_effects_config.echo > 0.0) {
                    gb_effects_config.echo = 0.0;
                    if (gb_effects_config.stereo == 0.0 && !gb_effects_config.surround) {
                        gb_effects_config.enabled = false;
                    }
                    systemScreenMessage("Echo off");
                } else {
                    gb_effects_config.echo = SOUND_ECHO;
                    gb_effects_config.enabled = true;
                    systemScreenMessage("Echo on");
                }
                break;
            case SDLK_KP_ENTER:
                if (gb_effects_config.surround) {
                    gb_effects_config.surround = false;
                    if (gb_effects_config.stereo == 0.0 && gb_effects_config.echo == 0.0) {
                        gb_effects_config.enabled = false;
                    }
                    systemScreenMessage("Surround off");
                } else {
                    gb_effects_config.surround = true;
                    gb_effects_config.enabled = true;
                    systemScreenMessage("Surround on");
                }
                break;

            //case SDLK_p:
            //    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
            //        paused = !paused;
            //        if (paused)
            //            soundPause();
            //        else
            //            soundResume();
            //        if (paused)
            //            wasPaused = true;
            //        systemConsoleMessage(paused ? "Pause on" : "Pause off");
            //    }
            //    break;
            case SDLK_ESCAPE:
                //emulating = 0;
				PauseMenu_Toggle();
				//paused = !paused;
				//if (paused)
				//	soundPause();
				//else
				//	soundResume();
				//if (paused)
				//	wasPaused = true;
				//Mod_Logln("Pause Toggle");
                break;
            case SDLK_HOME:
            //case SDLK_f:
				//Mod_Logln("Fullscreen Toggle");

                //if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
                    sdlSetFullScreen(!fullScreen);
                    //SDL_SetWindowFullscreen(window, fullScreen ? SDL_WINDOW_FULLSCREEN_DESKTOP : 0);
                    //if (openGL) {
                    //    if (fullScreen)
                    //        sdlOpenGLScaleWithAspect(desktopWidth, desktopHeight);
                    //    else
                    //        sdlOpenGLScaleWithAspect(destWidth, destHeight);
                    //}
                    //sdlInitVideo();
                //}
                break;
            //case SDLK_g:
            case SDLK_END:
                //if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
                    filterFunction = 0;
                    while (!filterFunction) {
                        filter = (Filter)((filter + 1) % kInvalidFilter);
                        //filterFunction = initFilter(filter, systemColorDepth, sizeX);
                        sdlSetFilter(filter, false);
                    }
                    if (getFilterEnlargeFactor(filter) != filter_enlarge) {
                        sdlResizeVideo();
                        if (!fullScreen)
                            SDL_SetWindowSize(window, destWidth, destHeight);
                    }
                    systemScreenMessage(getFilterName(filter));
                //}
                break;
            case SDLK_F11:
                if (armState) {
                    armNextPC -= 4;
                    reg[15].I -= 4;
                } else {
                    armNextPC -= 2;
                    reg[15].I -= 2;
                }
                debugger = true;
                break;
            case SDLK_F1:
            case SDLK_F2:
            case SDLK_F3:
            case SDLK_F4:
            case SDLK_F5:
            case SDLK_F6:
            case SDLK_F7:
            case SDLK_F8:
                if (!(event.key.keysym.mod & MOD_NOSHIFT) && (event.key.keysym.mod & KMOD_SHIFT)) {
                    sdlHandleSavestateKey(event.key.keysym.sym - SDLK_F1, 1); // with SHIFT
                } else if (!(event.key.keysym.mod & MOD_KEYS)) {
                    sdlHandleSavestateKey(event.key.keysym.sym - SDLK_F1, 0); // without SHIFT
                }
                break;

			//case SDLK_F5:
			//	sdlHandleSavestateKey(0, 1);
			//	break;
			//case SDLK_F7:
			//	sdlHandleSavestateKey(0, 0);
			//	break;
            /* backups - only load */
            case SDLK_F9:
                /* F9 is "load backup" - saved state from *just before* the last restore */
                if (!(event.key.keysym.mod & MOD_NOSHIFT)) /* must work with or without shift, but only without other modifiers*/
                {
                    sdlReadState(SLOT_POS_LOAD_BACKUP);
                }
                break;
            case SDLK_F10:
                /* F10 is "save backup" - what was in the last overwritten savestate before we overwrote it*/
                if (!(event.key.keysym.mod & MOD_NOSHIFT)) /* must work with or without shift, but only without other modifiers*/
                {
                    sdlReadState(SLOT_POS_SAVE_BACKUP);
                }
                break;
            case SDLK_1:
            case SDLK_2:
            case SDLK_3:
            case SDLK_4:
                if (!(event.key.keysym.mod & MOD_NOALT) && (event.key.keysym.mod & KMOD_ALT)) {
                    const char* disableMessages[4] = { "autofire A disabled",
                        "autofire B disabled",
                        "autofire R disabled",
                        "autofire L disabled" };
                    const char* enableMessages[4] = { "autofire A",
                        "autofire B",
                        "autofire R",
                        "autofire L" };

                    EKey k = KEY_BUTTON_A;
                    if (event.key.keysym.sym == SDLK_1)
                        k = KEY_BUTTON_A;
                    else if (event.key.keysym.sym == SDLK_2)
                        k = KEY_BUTTON_B;
                    else if (event.key.keysym.sym == SDLK_3)
                        k = KEY_BUTTON_R;
                    else if (event.key.keysym.sym == SDLK_4)
                        k = KEY_BUTTON_L;

                    if (inputToggleAutoFire(k)) {
                        systemScreenMessage(enableMessages[event.key.keysym.sym - SDLK_1]);
                    } else {
                        systemScreenMessage(disableMessages[event.key.keysym.sym - SDLK_1]);
                    }
                } else if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
                    int mask = 0x0100 << (event.key.keysym.sym - SDLK_1);
                    layerSettings ^= mask;
                    layerEnable = DISPCNT & layerSettings;
                    CPUUpdateRenderBuffers(false);
                }
                break;
            case SDLK_5:
            case SDLK_6:
            case SDLK_7:
            case SDLK_8:
                if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
                    int mask = 0x0100 << (event.key.keysym.sym - SDLK_1);
                    layerSettings ^= mask;
                    layerEnable = DISPCNT & layerSettings;
                }
                break;
            case SDLK_9:
                systemScreenMessage("Battery Read?");
                sdlReadBattery();
                break;
            case SDLK_0:
                systemScreenMessage("Battery Write?");
                sdlWriteBattery();
                break;
                /* case SDLK_n:
                    if (!(event.key.keysym.mod & MOD_NOCTRL) && (event.key.keysym.mod & KMOD_CTRL)) {
                        if (paused)
                            paused = false;
                        pauseNextFrame = true;
                    }
                    break;*/
            case SDLK_p:

                //systemScreenMessage(string("sizeX=" + to_string(sizeX) + ", sizeY=" + to_string(sizeY)).c_str());
                //systemScreenMessage(string("w=" + to_string(destWidth) + ", h=" + to_string(destHeight)).c_str());
                systemScreenMessage(string("w=" + to_string(window_size_x) + ", h=" + to_string(window_size_y)).c_str());
                sdlResizeVideo();
                break;
            case SDLK_INSERT:

                systemScreenMessage(glRect.top_left.string_rep().c_str());
                break;
            case SDLK_DELETE:

                systemScreenMessage(glRect.bottom_left.string_rep().c_str());
                break;
            case SDLK_PAGEUP:

                systemScreenMessage(glRect.top_right.string_rep().c_str());
                break;
            case SDLK_PAGEDOWN:

                systemScreenMessage(glRect.bottom_right.string_rep().c_str());
                break;
            default:
                break;
            }
            //inputProcessSDLEvent(event);